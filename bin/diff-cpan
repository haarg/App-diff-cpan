#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec ();
use File::Temp ();
use File::Basename ();
use JSON::PP ();
use HTTP::Tiny ();
use Cwd ();
use Config ();
use IPC::Open3 ();
use Getopt::Long qw(:config gnu_getopt require_order pass_through);
use Pod::Usage ();
use Parse::CPAN::Meta ();

sub run_capture {
  my @cmd = @_;
  open my $in, '<', File::Spec->devnull
    or die "can't open /dev/null: $!";
  my $pid = IPC::Open3::open3($in, my $out, undef, @cmd)
    or die "Failed to exec @cmd: $!";
  my $output = do { local $/; <$out> };
  close $out;
  waitpid $pid, 0;
  die "@cmd failed:\n$output"
    if $?;
  return 1;
}

sub build {
  my $from = shift;
  print "Building... ";
  my $cwd = Cwd::cwd();
  chdir $from;
  my $to = File::Temp->newdir('dist-diff-build-XXXXXX', TMPDIR => 1, CLEANUP => 1);
  eval {
    if (-e 'dist.ini') {
      run_capture 'dzil', 'build', '--no-tgz', '--in', $to;
    }
    elsif (-e 'Build.PL') {
      open my $fh, '<', 'Build.PL'
        or die "can't read Build.PL: $!";
      my $content = do { local $/; <$fh> };
      close $fh;
      my @build;
      if ($content =~ /Module::Build::Tiny/) {
        # assume mbtiny
        require App::ModuleBuildTiny::Dist;
        my $dist = App::ModuleBuildTiny::Dist->new;
        $dist->write_dir($to);
      }
      else {
        # assume Module::Build
        require Module::Build;
        my $mb = Module::Build->new_from_context;
        no warnings 'once';
        local *App::Diff::CPAN::MB::dist_dir = sub { $to };
        local @App::Diff::CPAN::MB::ISA = ref $mb;
        bless $mb, 'App::Diff::CPAN::MB';
        $mb->ACTION_distdir;
      }
    }
    elsif (-e 'Makefile.PL') {
      -e 'Makefile' or run_capture $^X, 'Makefile.PL';
      -e 'MANIFEST' or run_capture $Config::Config{make}, 'manifest';
      run_capture $Config::Config{make}, 'distdir', "DISTVNAME=$to";
    }
    else {
      die "Don't know how to build $from";
    }
    1;
  } or do {
    my $e = $@;
    chdir $cwd;
    die $e;
  };
  print "\n";
  return $to;
}

sub dist_name {
  my $dist_dir = shift;
  if (my ($metafile) = grep -e, map "$dist_dir/$_", qw(MYMETA.json MYMETA.yml META.json META.yml)) {
    my $meta = Parse::CPAN::Meta->load_file($metafile);
    return $meta->{name};
  }
  else {
    my $dist = File::Basename::basename(Cwd::realpath($dist_dir));
    $dist =~ s/-v?[0-9]+(?:\.[0-9_]+)+(?:-TRIAL|-RC[0-9]+)\z//;
    return $dist;
  }
}

$|++;

Getopt::Long::GetOptions(
  'h|help' => \my $help,
) or Pod::Usage::pod2usage(2);

if ($help) {
  Pod::Usage::pod2usage(-exitval => 0, -verbose => 2);
}

my $dist;
my $dist_dir = $ARGV[0] && $ARGV[0] !~ /^-/ ? shift : undef;

my $tempdir = File::Temp->newdir('dist-diff-XXXXXX', TMPDIR => 1);

if ($dist_dir && -d $dist_dir) {
  $dist_dir = Cwd::realpath($dist_dir);
  $dist = dist_name($dist_dir);
}
elsif ($dist_dir) {
  die "Don't know what to do with $dist_dir";
}
else {
  $dist_dir = build('.');
  $dist = dist_name($dist_dir);
}

my $get;
if (HTTP::Tiny->can_ssl) {
  $get = sub {
    HTTP::Tiny->new->get(@_)->{content} || '';
  };
}
else {
  my $curl = `which curl`;
  chomp $curl;
  if (-x $curl) {
    $get = sub {
      open my $fh, '-|', 'curl', '-L', '--', @_;
      scalar do { local $/; <$fh> };
    };
  }
  else {
    my $wget = `which wget`;
    chomp $wget;
    if (-x $get) {
      $get = sub {
        open my $fh, '-|', 'wget', '-O', '-', '--', @_;
        scalar do { local $/; <$fh> };
      };
    }
  }
}

my $extracted_dir = do {
  print "Finding latest release for $dist... ";
  my $dist_data = JSON::PP::decode_json($get->('https://fastapi.metacpan.org/v1/release/'.$dist));
  my $download_url = $dist_data->{download_url} || die "Unable to find latest release!\n";

  my $filename = $download_url;
  $filename =~ s{.*/}{};

  print "($filename)\n";

  my $dist_file = File::Spec->catfile($tempdir, $filename);
  my $extract_root = File::Spec->catdir($tempdir, 'cpan');
  mkdir $extract_root;

  print "Downloading... ";
  {
    open my $fh, '>:raw', $dist_file
      or die "can't open $dist_file: $!";
    print $fh $get->($download_url);
    close $fh;
  }
  print "\n";

  my $type
    = $dist_file =~ /\.gz$/   ? 'z'
    : $dist_file =~ /\.bz2$/  ? 'j'
    : $dist_file =~ /\.xz$/   ? 'Z'
                              : '';

  print "Extracting... ";
  {
    my $cwd = Cwd::cwd();
    chdir $extract_root;
    system 'tar', 'x'.$type.'f', $dist_file and die "failed to extract";
    chdir $cwd;
  }
  print "\n";

  my ($extracted_dir) = glob($extract_root.'/*/');

  my $cpan_dir = File::Spec->catdir($tempdir, File::Basename::basename($extracted_dir));
  symlink $extracted_dir, $cpan_dir;
  File::Spec->abs2rel($cpan_dir, $tempdir) . '/';
};

my $local_dir = do {
  my $try_length = length($extracted_dir) - 1;
  my $local_name = 'local';
  my $local_length = length $local_name;
  $local_name = (' ' x ($try_length - $local_length)) . $local_name
    if $local_length < $try_length;
  my $local_root = File::Spec->catdir($tempdir, $local_name);
  symlink $dist_dir, $local_root;
  File::Spec->abs2rel($local_root, $tempdir) . '/';
};

my $cwd = Cwd::cwd();
chdir $tempdir;
system qw(git diff --no-index --no-prefix), @ARGV, '--', $extracted_dir, $local_dir;
chdir $cwd;
exit $?;

__END__

=head1 NAME

diff-cpan - Diff a dist between CPAN and local

=head1 SYNOPSIS

  # diff a build from the current directory with the latest CPAN release
  $ diff-cpan

  # diff a local directory with the latest CPAN release
  $ diff-cpan Some-Local-Dir

=head1 DESCRIPTION

Get a diff between the a local dist and the latest CPAN release.

=head1 OPTIONS

All options are passed through to C<git diff>.  Some options may not be
compatible with the way C<git diff> is invoked.

=cut
